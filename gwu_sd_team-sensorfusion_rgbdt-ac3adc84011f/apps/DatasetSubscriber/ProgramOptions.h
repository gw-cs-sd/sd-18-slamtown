//============================================================================
// Name        : ProgramOptions.h
// Author      : CosmaC
// Date        : September, 2017
// Copyright   : GWU Research
// Description : Program options parser
//============================================================================

#pragma once

#include "cxxopts/cxxopts.hpp"

#include <sstream>
#include <string>

struct ProgramOptions {

    size_t metadata_size;
    size_t batch_size;
    size_t color_frame_bbp;

    ProgramOptions()
        : metadata_size(5),
        batch_size(1),
        color_frame_bbp(3) {};

    std::string toString() {
        std::ostringstream string_stream;
        string_stream << "Program configuration: \n"
            << "\t- Metadata header size: " << metadata_size << std::endl
            << "\t- Frame batch size: " << batch_size << std::endl
            << "\t- Color frame bpp: " << color_frame_bbp << std::endl
            << std::endl; 
        return string_stream.str();
    }
};

// Program options parser
ProgramOptions ParseProgramOptions(int argc, char** argv) {

    // Parse input arguments
    cxxopts::Options options("DatasetSubscriber",
        "\n\nDatasetSubscriber: Saves to disk raw and registred data generated by "
        "a publisher app (e.g. DatasetPublisher or ThermalModelPublisher).");
    
    options.add_options()
        ("m,metadata_size", "Size in bytes of the message header.",
            cxxopts::value<size_t>()->default_value("5"))
        ("b,batch_size", "Number of frames to be stored together in a file.", 
            cxxopts::value<size_t>()->default_value("1"))
        ("c,color_frame_bbp", "Depth in bytes of the color frame.",
            cxxopts::value<size_t>()->default_value("3"));

    options.parse(argc, argv);

    if (options.count("help")) {
        std::cout << options.help() << std::endl;
        exit(0);
    }


    // Create configuration struct
    ProgramOptions po;
    po.metadata_size = options["metadata_size"].as<size_t>();
    po.batch_size = options["batch_size"].as<size_t>();
    po.color_frame_bbp = options["color_frame_bbp"].as<size_t>();

    // Show selecetd options
    std::cout << po.toString() << std::endl;

    return po;
}